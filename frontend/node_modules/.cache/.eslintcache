[{"/Users/sabhinavbharadwaj/Desktop/Coding/TravelBuddyAI/frontend/src/index.js":"1","/Users/sabhinavbharadwaj/Desktop/Coding/TravelBuddyAI/frontend/src/App.js":"2","/Users/sabhinavbharadwaj/Desktop/Coding/TravelBuddyAI/frontend/src/components/InputPage.js":"3"},{"size":197,"mtime":1759598582652,"results":"4","hashOfConfig":"5"},{"size":188,"mtime":1759597826024,"results":"6","hashOfConfig":"5"},{"size":9555,"mtime":1759599360717,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15j7bxj",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/sabhinavbharadwaj/Desktop/Coding/TravelBuddyAI/frontend/src/index.js",[],"/Users/sabhinavbharadwaj/Desktop/Coding/TravelBuddyAI/frontend/src/App.js",[],"/Users/sabhinavbharadwaj/Desktop/Coding/TravelBuddyAI/frontend/src/components/InputPage.js",["15"],"import React, { useState, useEffect, useRef } from 'react';\nimport '../styles/InputPage.css';\n\nconst InputPage = () => {\n    const [startLocation, setStartLocation] = useState('');\n    const [endLocation, setEndLocation] = useState('');\n    const [transportMode, setTransportMode] = useState(['subways']);\n    const [startTime, setStartTime] = useState(new Date().toISOString().slice(0, 16));\n    const [tripDuration, setTripDuration] = useState('');\n    const [wheelchairAccessible, setWheelchairAccessible] = useState(false);\n    \n    const startLocationRef = useRef(null);\n    const endLocationRef = useRef(null);\n    const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const data = {\n            startLocation,\n            endLocation,\n            transportMode,\n            startTime,\n            tripDuration,\n            wheelchairAccessible,\n        };\n\n        const response = await fetch('http://localhost:5000/api/itinerary', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        });\n\n        if (response.ok) {\n            const result = await response.json();\n            console.log('Success:', result);\n        } else {\n            console.error('Error:', response.statusText);\n        }\n    };\n\n    // Load Google Maps API\n    useEffect(() => {\n        const loadGoogleMapsAPI = () => {\n            if (window.google && window.google.maps) {\n                setIsGoogleMapsLoaded(true);\n                initializeAutocomplete();\n                return;\n            }\n\n            const script = document.createElement('script');\n            script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBDnnTPHM5G7-HoKmR2-w1Mz_UBCn3cTBY&libraries=places`;\n            script.async = true;\n            script.defer = true;\n            script.onload = () => {\n                setIsGoogleMapsLoaded(true);\n                initializeAutocomplete();\n            };\n            document.head.appendChild(script);\n        };\n\n        loadGoogleMapsAPI();\n    }, []);\n\n    const initializeAutocomplete = () => {\n        if (window.google && startLocationRef.current && endLocationRef.current) {\n            // Initialize autocomplete for start location\n            const startAutocomplete = new window.google.maps.places.Autocomplete(\n                startLocationRef.current,\n                { types: ['geocode'], componentRestrictions: { country: 'us' } }\n            );\n            \n            startAutocomplete.addListener('place_changed', () => {\n                const place = startAutocomplete.getPlace();\n                if (place.formatted_address) {\n                    setStartLocation(place.formatted_address);\n                }\n            });\n\n            // Initialize autocomplete for end location\n            const endAutocomplete = new window.google.maps.places.Autocomplete(\n                endLocationRef.current,\n                { types: ['geocode'], componentRestrictions: { country: 'us' } }\n            );\n            \n            endAutocomplete.addListener('place_changed', () => {\n                const place = endAutocomplete.getPlace();\n                if (place.formatted_address) {\n                    setEndLocation(place.formatted_address);\n                }\n            });\n        }\n    };\n\n    const handleGetLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    \n                    // Check if Google Maps API is loaded before using reverse geocoding\n                    if (window.google && window.google.maps && window.google.maps.Geocoder) {\n                        const geocoder = new window.google.maps.Geocoder();\n                        const latlng = { lat: latitude, lng: longitude };\n                        \n                        geocoder.geocode({ location: latlng }, (results, status) => {\n                            if (status === 'OK' && results[0]) {\n                                setStartLocation(results[0].formatted_address);\n                            } else {\n                                console.error('Geocoder failed due to: ' + status);\n                                setStartLocation(`${latitude}, ${longitude}`);\n                            }\n                        });\n                    } else {\n                        // If Google Maps isn't loaded yet, wait a bit and try again\n                        setTimeout(() => {\n                            if (window.google && window.google.maps && window.google.maps.Geocoder) {\n                                const geocoder = new window.google.maps.Geocoder();\n                                const latlng = { lat: latitude, lng: longitude };\n                                \n                                geocoder.geocode({ location: latlng }, (results, status) => {\n                                    if (status === 'OK' && results[0]) {\n                                        setStartLocation(results[0].formatted_address);\n                                    } else {\n                                        setStartLocation(`${latitude}, ${longitude}`);\n                                    }\n                                });\n                            } else {\n                                // Fallback to coordinates if Google Maps still not loaded\n                                setStartLocation(`${latitude}, ${longitude}`);\n                            }\n                        }, 1000);\n                    }\n                },\n                (error) => {\n                    console.error('Geolocation error:', error);\n                    alert('Unable to retrieve your location: ' + error.message);\n                }\n            );\n        } else {\n            alert('Geolocation is not supported by your browser.');\n        }\n    };\n\n    const handleTransportModeChange = (mode) => {\n        setTransportMode(prev => {\n            if (prev.includes(mode)) {\n                // Remove the mode if it's already selected\n                return prev.filter(m => m !== mode);\n            } else {\n                // Add the mode if it's not selected\n                return [...prev, mode];\n            }\n        });\n    };\n\n    return (\n        <div className=\"input-page\">\n            <h1>TravelBuddyAI</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Start Location:\n                    <div className=\"location-input-container\">\n                        <input\n                            ref={startLocationRef}\n                            type=\"text\"\n                            value={startLocation}\n                            onChange={(e) => setStartLocation(e.target.value)}\n                            placeholder=\"Search for a location...\"\n                            required\n                        />\n                        <button type=\"button\" onClick={handleGetLocation} className=\"location-btn\">\n                            Use Current Location\n                        </button>\n                    </div>\n                </label>\n                <label>\n                    End Location:\n                    <input\n                        ref={endLocationRef}\n                        type=\"text\"\n                        value={endLocation}\n                        onChange={(e) => setEndLocation(e.target.value)}\n                        placeholder=\"Search for destination...\"\n                    />\n                </label>\n                <label>\n                    Mode of Transport:\n                    <div className=\"transport-mode-container\">\n                        {['subways', 'buses', 'taxis', 'e-bikes', 'walking'].map((mode) => (\n                            <label key={mode} className=\"checkbox-label\">\n                                <input\n                                    type=\"checkbox\"\n                                    checked={transportMode.includes(mode)}\n                                    onChange={() => handleTransportModeChange(mode)}\n                                />\n                                {mode.charAt(0).toUpperCase() + mode.slice(1)}\n                            </label>\n                        ))}\n                    </div>\n                </label>\n                <label>\n                    Start Time:\n                    <input\n                        type=\"datetime-local\"\n                        value={startTime}\n                        onChange={(e) => setStartTime(e.target.value)}\n                    />\n                </label>\n                <label>\n                    Trip Duration (in minutes):\n                    <input\n                        type=\"number\"\n                        value={tripDuration}\n                        onChange={(e) => setTripDuration(e.target.value)}\n                    />\n                </label>\n                <label>\n                    Wheelchair Accessible:\n                    <input\n                        type=\"checkbox\"\n                        checked={wheelchairAccessible}\n                        onChange={(e) => setWheelchairAccessible(e.target.checked)}\n                    />\n                </label>\n                <button type=\"submit\">Plan Itinerary</button>\n            </form>\n        </div>\n    );\n};\n\nexport default InputPage;",{"ruleId":"16","severity":1,"message":"17","line":14,"column":12,"nodeType":"18","messageId":"19","endLine":14,"endColumn":30},"no-unused-vars","'isGoogleMapsLoaded' is assigned a value but never used.","Identifier","unusedVar"]